This is an example of Interface-segregation principle (ISP) states that no client should be forced to depend on methods it does not use.


Here we apply the ISP and we separate the single Device interface into 3 smaller interfaces: Printer, Fax, and Scanner.

interface Printer{
    void Print();
}
interface Fax{
    void Fax();
}
interface Scanner{
    void Scan();
}


This way it’s easier to implement classes that do not need to handle all the original functionalities of the Device interface like our EconomicPrinter. Our code is more decoupled and easier to mantain. Let’s re-implement our EconomicPrinter with this architecture:



class EconomicPrinter implements Printer
{
    public void Print()
    {
         // Printing code.
    }
}


class AllInOnePrinter implements Printer, Fax, Scanner
{
    public void Print()
    {
         // Printing code.
    }
    public void Fax()
    {
         // Beep booop biiiiip.
    }
    public void Scan()
    {
         // Scanning code.
    }
}

The ISP guides us to create many small interfaces with coherent functionalities instead of a few big interfaces with lots of different methods
